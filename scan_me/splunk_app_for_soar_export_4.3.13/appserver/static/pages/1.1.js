webpackJsonp([1],{

/***/ 132:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(require, exports, module) {\n    var _ = __webpack_require__(121);\n    var Backbone = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"backbone\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var BaseManager = __webpack_require__(134);\n    var BaseSplunkView = __webpack_require__(135);\n    var BaseTokenModel = __webpack_require__(127);\n    var SearchModels = __webpack_require__(137);\n    var console = window.console;\n\n    var indent = function(count) {\n        var str = '';\n        for (var i = 0; i < count; i++) { \n            str += '    '; \n        }\n        return str;\n    };\n\n    var warn = function(msg) {\n        return (\"WARNING: \" + msg);\n    };\n\n    var categoryEnum = {\n        MANAGER: 'manager',\n        VIEW: 'view',\n        NAMESPACE: 'namespace',\n        UNKNOWN: 'unknown'\n    };\n\n    var Debugger = Backbone.Model.extend(/** @lends splunkjs.mvc.Debugger.prototype */{\n        ready : false,\n\n        initialize: function() { \n            var that = this;    \n\n            that.registry = that.get('registry');\n\n            if (!that.registry) {\n                console.log(\"splunk.mvc debugging interface could not find the registry\");\n                return;\n            }\n\n            // For now this is a command-line tool, so we put information on the command line.\n            console.log(\"The Splunkjs debugger is running. For help, enter 'splunkjs.mvc.Debugger.help()'\");\n        },\n\n        isReady: function() {\n            return this.ready;\n        },\n\n        getDebugData: function() {\n\n            var that = this;\n            var components = [];\n\n            var registeredComponentKeys = that.registry.getInstanceNames();\n\n            _.each(registeredComponentKeys, function(elementID) {\n                var registryElement = that.registry.getInstance(elementID);\n                var type = that._getComponentType(registryElement);\n                var category = that._getComponentCategory(registryElement);\n                var validOptions = [];\n                \n                var elementMetaData = { \n                    'id' : elementID,\n                    'category' : category,\n                    'type': type,\n                    'warnings': []\n                };\n\n                // Add data to views\n                if (category === categoryEnum.VIEW) {\n                    var managerid = null;\n                    var settings = {};\n                    validOptions = that._getValidViewOptions(registryElement);\n\n                    // If the view has settings we inspect them for issues\n                    // JIRA: DVPL-3316\n                    if (registryElement.settings) {\n                        managerid = registryElement.settings.get('managerid') || null;\n                        settings = _.clone(registryElement.settings.attributes);\n                        \n                        _.each(_.keys(settings), function(key) {\n\n                            // If a setting is not known to be valid we add a warning\n                            if (!_.contains(validOptions, key)) {\n\n                                // Ignore unrecognized map and chart settings\n                                // JIRA: DVPL-3317\n                                var partOne = key.split('.')[0];\n                                if (!(partOne === 'mapping' || partOne === 'charting')) {\n                                    elementMetaData.warnings.push(warn(key + \" is not a recognized setting.\"));\n                                }\n                            }\n                        });\n                    }\n                    \n                    elementMetaData.managerid = managerid;\n                    elementMetaData.settings = settings;\n                    elementMetaData.el = registryElement.el || \"no element set\";\n                }\n                // Add data to token namespaces\n                if (category === categoryEnum.NAMESPACE) {\n                    elementMetaData.tokens = [];\n\n                    // For each token in the namespace, attach the value and an empty list of \n                    // listeners that will be populated later \n                    _.each(registryElement.attributes, function(value, key) {\n                        var tokenData = {\n                            name: key,\n                            value : value,\n                            listenerIds: []\n                        };\n                        elementMetaData.tokens.push(tokenData);\n                    });\n                }    \n                // Add data to managers\n                if (category === categoryEnum.MANAGER) {\n                    validOptions = that._getValidManagerOptions(registryElement);\n                    \n                    if (registryElement.attributes) {\n                        var attributes = _.clone(registryElement.attributes);\n                        \n                        _.each(_.keys(attributes), function(key) {\n                            // If a setting is not known to be valid we add a warning\n                            if (!_.contains(validOptions, key)) {\n                                elementMetaData.warnings.push(warn(key + \" is not a recognized attribute\"));\n                            }\n                        });\n                    }\n                    \n                    elementMetaData.attributes = registryElement.attributes;\n                    elementMetaData.query = registryElement.query;\n                    elementMetaData.search = registryElement.search;\n                }\n\n                // Add token data to everything but namespaces\n                if (category !== categoryEnum.NAMESPACE) {\n                    elementMetaData.bindings = that._getComponentBindings(elementID);\n                }\n                components.push(elementMetaData);                \n            });\n                \n            // Now that we have our elements in place, we can check connections between them\n            // and look for other potential issues. First, separate componenet types for convenience.\n            var managers = _.where(components, {'category' : categoryEnum.MANAGER});\n            var views = _.where(components, {'category' : categoryEnum.VIEW});\n            var namespaces = _.where(components, {'category' : categoryEnum.NAMESPACE});\n            \n            // Enumerate views bound to each manager and check for issues\n            _.each(managers, function(manager) {\n                // Pluck the view ids from views where managerid is this manager's id\n                manager.viewIds = _.pluck(_.where(views, {'managerid': manager.id}), 'id');\n\n                // If there are no views bound to the search, push a warning\n                if (manager.viewIds.length < 1) { \n                    manager.warnings.push(warn(\"no views bound to search manager.\"));\n                }\n            });\n\n            // Check for views bound to non-existent managers\n            _.each(views, function(view) {\n                if (view.managerid) {\n                    if (!_.contains(_.pluck(managers, 'id'), view.managerid)) {\n                        view.warnings.push(warn(view.managerid + \" is not a registered manager.\"));\n                    }\n                }\n            });\n\n            // Find components bound to each token and attach them to token metadata\n            _.each(namespaces, function(namespace) {\n                _.each(namespace.tokens, function(token) {\n                    // Look through views and managers and find those that watch this\n                    // token's name\n                    var listeners = _.filter(_.union(managers, views), function(item) {\n                        return _.some(item.bindings, function(binding) {\n                            if (binding && binding.observes && binding.observes.length > 0) {\n                                return _.some(binding.observes, function(observes) {\n                                    return (observes.namespace === namespace.id && observes.name === token.name);        \n                                });\n                            }\n                        });\n                    });\n\n                    // Attach just the ids of the listeners\n                    token.listenerIds = _.pluck(listeners, 'id');\n                });\n            });\n\n            return components;\n        },\n\n        _getValidViewOptions: function(element) {\n            var options = ['id', 'name', 'managerid', 'manager', 'app', 'el', 'data'];\n\n            // Again we check this is valid.\n            if (element.constructor.prototype.options) {\n                options = _.union(options, _.keys(element.constructor.prototype.options));\n            }\n            return options;\n        },\n\n        _getValidManagerOptions: function(element) {\n            var validOptions = _.union(\n                ['app', 'id', 'owner', 'name', 'data'], \n                _.keys(element.constructor.prototype.defaults) || [], \n                SearchModels.SearchSettingsModel.ALLOWED_ATTRIBUTES\n            );\n            \n            return validOptions;\n        },\n\n        _getComponentType: function(component) {\n            var type = \"Unknown type\";\n            if (component.moduleId) {\n                var name = component.moduleId.split('/').pop();\n                if (name.length > 0) {\n                    type = name;\n                }                \n            }\n            return type;\n        },\n\n        _getComponentCategory: function(component) {\n            var category = categoryEnum.UNKNOWN;\n\n            if (component instanceof BaseSplunkView) {\n                category = categoryEnum.VIEW;\n            }\n            else if (component instanceof BaseManager) {\n                category = categoryEnum.MANAGER;\n            }\n            else if (component instanceof BaseTokenModel) {\n                category = categoryEnum.NAMESPACE;\n            }\n            return category;\n        },\n\n        _getComponentTokenBoundProperties: function(componentId) {\n            var tokenBoundProperties = [];\n            var bindings = this._getComponentBindings(componentId);\n            tokenBoundProperties = _.keys(bindings);\n            return tokenBoundProperties;\n        },\n\n        _getComponentBindings: function(componentId) {\n            var component = this.registry.getInstance(componentId);\n            \n            var bindings = {};\n            if (component && component.settings) {\n                bindings = _.extend(bindings, _.clone(component.settings._bindings));\n            }\n            return bindings;\n        },\n        \n        createError: function(message) {            \n            return message;\n        },\n\n        printViewInfo: function() {\n            var that = this;\n            var views = that.getInfoForViews();\n\n            console.log(\"Views:\");\n            _.each(views, function(view) {\n                console.log(indent(1) + \"ID: \" + view.id);\n                console.log(indent(2) + \"Type: \" + view.type);\n                console.log(indent(2) + \"Manager: \" + view.managerid);\n                console.log(indent(2) + \"Element: \", view.el);\n                console.log(indent(2) + \"Settings: \");\n                _.each(_.keys(view.settings), function(key) {\n                    var tokenInfo = \"\";\n                    var binding = view.bindings[key];\n                    var hasTokens = binding && binding.observes && binding.observes.length > 0;\n                    if (hasTokens) {\n                        var template = JSON.stringify(binding.template);\n                        var partiallyResolvedValue = JSON.stringify(binding.computeValue(/*_retainUnmatchedTokens=*/true));\n                        tokenInfo = \" [bound: \" + template + \", resolved: \" + partiallyResolvedValue + \"]\";    \n                    }\n                    console.log(indent(3) + key + \": \" + JSON.stringify(view.settings[key]) + tokenInfo); \n                });\n                if(view.warnings.length>0) {\n                    console.log(indent(2) + \"WARNINGS: \");\n                    _.each(view.warnings, function(warning) {\n                        console.log(indent(3) + warning);\n                    });\n                }\n            });\n        },\n\n        printSearchManagerInfo: function() {\n            var that = this;\n            var managers = that.getInfoForManagers();\n\n            console.log(\"Search Managers:\");\n            _.each(managers, function(manager) {\n                console.log(indent(1) + \"ID: \" + manager.id);\n                console.log(indent(2) + \"Type: \" + manager.type);\n                if (manager.attributes) {\n                    console.log(indent(2) + \"Attributes: \" );\n                    var propertiesToSkip = SearchModels.SearchSettingsModel.ALLOWED_ATTRIBUTES;\n                    \n                    _.each(manager.attributes, function(value, key) {\n                        if (_.contains(propertiesToSkip, key)) {\n                            return;\n                        }\n                        console.log(indent(3) + key + \": \" + JSON.stringify(value)); \n                    });\n                }\n                if (manager.settings && manager.settings.attributes) {\n                    console.log(indent(2) + \"Search Properties: \" );\n                    _.each(manager.settings.attributes, function(value, key) {\n                        var tokenInfo = \"\";\n                        var binding = manager.bindings[key];\n                        var hasTokens = binding && binding.observes && binding.observes.length > 0;\n                        if (hasTokens) {\n                            var template = JSON.stringify(binding.template);\n                            var partiallyResolvedValue = JSON.stringify(binding.computeValue(/*_retainUnmatchedTokens=*/true));\n                            tokenInfo = \" [bound: \" + template + \", resolved: \" + partiallyResolvedValue + \"]\";    \n                        }\n                        console.log(indent(3) + key + \": \" + JSON.stringify(value) + tokenInfo); \n                    });\n                }\n                console.log(indent(2) + \"Views bound to manager: \");\n                _.each(manager.viewIds, function(id) {\n                    console.log(indent(3) + id);\n                });\n                if (manager.warnings.length > 0) {\n                    console.log(indent(2) + \"WARNINGS: \");\n                    _.each(manager.warnings, function(warning) {\n                        console.log(indent(3) + warning);\n                    });\n                }\n            });\n        },\n\n        printTokenNamespaceInfo: function() {\n            var that = this;\n            var namespaces = that.getInfoForNamespaces();\n\n            console.log(\"Token Namespaces:\");\n            _.each(namespaces, function(namespace) {\n                console.log(indent(1) + \"ID: \" + namespace.id);\n                console.log(indent(2) + \"Type: \" + namespace.type);\n                console.log(indent(2) + \"Tokens: \");\n                _.each(namespace.tokens, function(token) {\n                    console.log(indent(3) + token.name + \": \");\n                    console.log(indent(4) + \"value: \" + JSON.stringify(token.value));\n                    console.log(indent(4) + \"listeners: \" + token.listenerIds.join(', '));\n                });\n            });\n        },\n\n        /**\n         * Prints all component info\n         */\n        printComponentInfo: function() {\n            this.printViewInfo();\n            this.printSearchManagerInfo();\n            this.printTokenNamespaceInfo();\n        },\n\n        printWarnings: function() {\n            var that = this;\n            var components = that.getDebugData();\n            console.log(\"WARNINGS:\");\n            _.each(components, function(item) {\n                if (item.warnings.length > 0 ) {\n                    console.log(indent(1), \"ID: \" + item.id + \": \");\n                    _.each(item.warnings, function(warning) {\n                        console.log(indent(2) + warning);\n                    });\n                }             \n            });\n        },\n\n        _getInfoForComponents: function(ctype) {\n            var components = this.getDebugData();\n            if (ctype !== undefined) {\n                return _.where(components, {'category': categoryEnum[ctype]});\n            }\n            return components;\n        },\n\n        getInfoForViews: function() { \n            return this._getInfoForComponents('VIEW'); \n        },\n\n        getInfoForManagers: function() { \n            return this._getInfoForComponents('MANAGER'); \n        },\n\n        getInfoForNamespaces: function() { \n            return this._getInfoForComponents('NAMESPACE'); \n        },\n\n        help : function() { \n            console.log(\"Splunkjs Debugger Commands\");\n            console.log(indent(1) + \"- printWarnings(): Prints all warnings to the console.\");\n            console.log(indent(1) + \"- printComponentInfo(): Prints all debug info and warnings to the console by component.\");\n            console.log(indent(1) + \"- printViewInfo(): Prints debug info for all Splunk views.\");\n            console.log(indent(1) + \"- printSearchManagerInfo(): Prints debug info for all Splunk search managers.\");\n            console.log(indent(1) + \"- printTokenNamespaceInfo(): Prints debug info for Splunk token namespaces.\");\n            console.log(indent(1) + \"- getDebugData(): Returns all debug metadata for components and namespaces.\");\n            console.log(indent(1) + \"- getInfoForViews(): Returns debug metadata for all Splunk views.\");\n            console.log(indent(1) + \"- getInfoForManagers(): Returns debug metadata for all Splunk managers.\");\n            console.log(indent(1) + \"- getInfoForNamespaces(): Returns debug metadata for all Splunk token namespaces.\");\n        }\n\n    });\n    \n    return Debugger;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///132\n");

/***/ }),

/***/ 133:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(require, exports, module) {\n    var _ = __webpack_require__(121);\n    var mvc = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"splunkjs/mvc\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var TokenEscapeString = __webpack_require__(128);\n    var TokenSafeString = __webpack_require__(126);\n    var console = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"util/console\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var TokenUtils = __webpack_require__(122);\n    var BaseModel = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"models/Base\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n    // Enables logging of when values are propagated between models.\n    var VERBOSE = false;\n\n    // DOC: BaseModel is a private superclass.\n    //      Backbone.Model is the nearest public superclass.\n\n    /**\n     * @constructor\n     * @memberOf splunkjs.mvc\n     * @name TokenAwareModel\n     * @description The **TokenAwareModel** class creates a new token-aware\n     * model with built-in data-binding support.\n     *\n     * The **set** and **get** methods support a \"tokens\" Boolean option.\n     * When `true`, the property is interpreted as a template\n     * that might contain token escapes such as \"$indexName$\".\n     * If set to a template, the property is defined as a computed property\n     * based on the referenced tokens and kept up to date when those token\n     * values change.\n     * @extends splunkjs.mvc.Utils\n     *\n     * @param {Object} attributes - Initial attributes of this model.\n     * @param {Object} options - Options.\n     * @param  {Object} options.tokenNamespace=default -  The name of the namespace to use\n     * when resolving unqualified token references such as `$token$`.\n     * @param options.retainUnmatchedTokens - When `true`, returns the computed\n     * value of the specified property, but with unresolved tokens retained in\n     * the output string. For example, the template \"$first$ $last$\" resolves to\n     * \"Bob $last$\" if only the `$first$` token was defined (and it was \"Bob\").\n     * @param  {Object} options.tokenEscaper - Escaping function that escapes all expanded\n     * token values.\n     * @param  {Object} options.allowNoEscape - Specify whether the $token|n$ no-escape filter can be used.\n     * See TokenUtils#replaceTokens()\n     * @param  {Object} options.* - Interpreted the same way as in {@link splunkjs.mvc.TokenAwareModel#set}.\n     *\n     * @example\n     * // get() and set() methods are always symmetric when using the\n     * // same 'tokens' option (usually 'true' or missing).\n     * this.set('color', '$color$', {tokens: true});\n     * this.get('color', {tokens: true});\n     * >> '$color$'\n     *\n     * // If a property depends on an uninitialized token,\n     * // it takes on an 'undefined' value.\n     * this.get('color');\n     * >> undefined\n     *\n     * // Properties update automatically when their template's\n     * // token(s) are updated.\n     * mvc.Components.getInstance('default').set('color', '#ff0000');\n     * this.get('color');\n     * >> '#ff0000'\n     *\n     * // Setting the literal value of a (non-pushed) property\n     * // will destroy any previous template it may have had.\n     * this.set('color', '#cafeba');\n     * this.get('color');\n     * >> '#cafeba'\n     * this.get('color', {tokens: true});\n     * >> '#cafeba'\n     * mvc.Components.getInstance('default').get('color');\n     * >> '#ff0000'\n     */\n    var TokenAwareModel = BaseModel.extend(/** @lends splunkjs.mvc.TokenAwareModel.prototype */{\n        /**\n         * @deprecated Enables token replacement by default for the <b>set</b> method.\n         *\n         * When <tt>true</tt>, all calls to <b>set</b> implicitly take the option\n         * <tt>{tokens: true}</tt>.\n         */\n        applyTokensByDefault: false,\n\n        /**\n         * @deprecated Enables retrieval of raw (unreplaced) tokens for\n         * the <b>get</b> and <b>toJSON</b> methods.\n         *\n         * When <tt>true</tt>, all calls to <b>get</b> and <b>toJSON</b> implicitly take the\n         * option <tt>{tokens: true}</tt>.\n         */\n        retrieveTokensByDefault: false,\n\n        // Private API:\n        //\n        // @param options._tokenRegistry\n        //                      An alternate token registry to use other than\n        //                      `mvc.Components`. For use by tests only.\n        //\n        // NOTE: Must override constructor() and not initialize()\n        //       because this._templates and listeners need to be\n        //       in place before the first (non-empty) call to set(),\n        //       which the default constructor() does by default.\n        constructor: function(attributes, options) {\n            attributes = attributes || {};\n            options = options || {};\n\n            // Save options whose effects persist beyond the constructor\n            this._tokenNamespace = options.tokenNamespace || undefined;\n            this._retainUnmatchedTokens = options.retainUnmatchedTokens;\n            this._tokenEscaper = options.tokenEscaper || undefined;\n            this._allowNoEscape = options.allowNoEscape;\n            this._tokenRegistry = options._tokenRegistry || mvc.Components;\n            this._applyTokensByDefault =\n                (options.hasOwnProperty('applyTokensByDefault'))\n                    ? options.applyTokensByDefault\n                    : this.applyTokensByDefault;\n            this._retrieveTokensByDefault =\n                (options.hasOwnProperty('retrieveTokensByDefault'))\n                    ? options.retrieveTokensByDefault\n                    : this.retrieveTokensByDefault;\n\n            // Initialize self to empty\n            BaseModel.prototype.constructor.call(this, {});\n            this._templates = new BaseModel({});\n            this._bindings = {};\n            this._pushed_properties = [];\n\n            // When property templates change, update property bindings\n            this.listenTo(this._templates, 'change', function(model, options) {\n                this._updateBindingsForProperties(model.changed, options);\n            });\n\n            // Initialize property values and templates\n            this.set(attributes, options);\n        },\n\n        _updateBindingsForProperties: function(properties, options) {\n            var that = this;\n            _.each(properties, function(propTemplate, propName) {\n                var newBinding;\n                if (propTemplate === undefined) {\n                    newBinding = undefined;\n                } else {\n                    // Create new binding for the property that\n                    // computes its value by taking the template\n                    // and replacing any token escapes that occur.\n                    var tokens = TokenUtils.getTokens(propTemplate, {\n                        tokenNamespace: that._tokenNamespace\n                    });\n\n                    var computeValueFunc = function(_retainUnmatchedTokens) {\n                        // If template is a solitary token escape and the token\n                        // has a non-string value, pass through that value.\n                        // (String values may still need to go through additional\n                        //  escaping based on the filter in the token escape.)\n                        if (TokenUtils.isToken(propTemplate)) {\n                            var token = tokens[0];\n                            var tokenModel = that._tokenRegistry.getInstance(\n                                token.namespace, { create: true });\n                            var tokenValue = tokenModel.get(token.name);\n                            if (!_.isString(tokenValue) && (tokenValue !== undefined)) {\n                                return tokenValue;\n                            }\n                        }\n\n                        var templateSatisfied = _.all(tokens, function(token) {\n                            var tokenModel = that._tokenRegistry.getInstance(\n                                token.namespace, { create: true });\n                            var tokenValue = tokenModel.get(token.name);\n\n                            var filtersSatisfied = _.all(token.filters, function(filter) {\n                                var filterFunc = TokenUtils.getFilter(\n                                    filter.name, that._tokenRegistry);\n                                return (filterFunc !== undefined);\n                            });\n\n                            return (tokenValue !== undefined) && filtersSatisfied;\n                        });\n\n                        var propValue;\n                        if (templateSatisfied || that._retainUnmatchedTokens || _retainUnmatchedTokens) {\n                            propValue = TokenUtils.replaceTokens(\n                                propTemplate, that._tokenRegistry, {\n                                    tokenNamespace: that._tokenNamespace,\n                                    escaper: that._tokenEscaper,\n                                    allowNoEscape: that._allowNoEscape\n                                });\n                        } else {\n                            propValue = undefined;\n                        }\n                        return propValue;\n                    };\n\n                    var items = [];\n                    _.each(tokens, function(token) {\n                        items.push({\n                            namespace: token.namespace,\n                            name: token.name\n                        });\n\n                        _.each(token.filters, function(filter) {\n                            items.push({\n                                namespace: TokenUtils._FILTER_NAMESPACE,\n                                name: filter.name\n                            });\n                        });\n                    });\n\n                    newBinding = {\n                        observes: items,\n                        template: propTemplate,\n                        computeValue: computeValueFunc\n                    };\n                }\n\n                that._setBinding(propName, newBinding, options);\n            });\n        },\n\n        /*\n         * This is an initial implementation of the general Data Binding\n         * feature that Token Binding is implemented on top of.\n         *\n         * Data Binding thinks not in terms of \"tokens\" but rather in terms\n         * of a \"binding\", its \"observed properties\" and its \"target property\".\n         * To reiterate, it should not be aware of tokens.\n         */\n        _setBinding: function(propName, newBinding, options) {\n            var that = this;\n\n            // Destroy the old binding, unregistering old listeners\n            this._disposeBindingListeners(this._bindings[propName]);\n\n            // Register new binding\n            this._bindings[propName] = newBinding;\n\n            if (newBinding !== undefined) {\n                // When observed properties change, update the target property value\n                newBinding._listeners = [];\n                _.each(newBinding.observes, function(observedItem) {\n                    var observedContext = that._tokenRegistry.getInstance(\n                        observedItem.namespace, { create: true });\n                    var observedPropName = observedItem.name;\n                    var listener = function() {\n                        that._pullPropertyValue(propName);\n                    };\n                    that.listenTo(observedContext, 'change:' + observedPropName, listener);\n\n                    // Save listener for later removal\n                    listener.dispose = function() {\n                        that.stopListening(observedContext, 'change:' + observedPropName, listener);\n                    };\n                    newBinding._listeners.push(listener);\n                });\n\n                // If property is push-enabled then push-enable the binding\n                if (this._isPushEnabled(propName)) {\n                    this._configureBindingForPush(propName);\n                }\n\n                /*\n                 * Reconcile the target property's preexisting value (if defined)\n                 * with the observed property(s)' value(s).\n                 *\n                 * If this is a push-pull binding, the target property's value (if defined)\n                 * takes precedence and otherwise the observed property's value is used.\n                 *\n                 * If this is a pull-only binding, just initialize the target property's\n                 * computed value based on the new binding.\n                 */\n                if (this._isPushEnabled(propName) && this.get(propName) !== undefined) {\n                    this._pushPropertyValue(propName, options);\n                } else {\n                    this._pullPropertyValue(propName, options);\n                }\n            }\n        },\n\n        _pullPropertyValue: function(propName, options) {\n            var binding = this._bindings[propName];\n            var propValue = binding.computeValue();\n\n            if (VERBOSE) {\n                console.log('PROPAGATE: ' + propName + ' <- ' + propValue);\n            }\n\n            // We may have gotten a stashed silent value (see set()), so we have\n            // to unstash it.\n            options = options || {};\n            if (options.hasOwnProperty('_silent')) {\n                options.silent = options._silent;\n                delete options._silent;\n            }\n\n            BaseModel.prototype.set.call(this, propName, propValue, options);\n        },\n\n        /**\n         * Marks the specified property as being push-enabled.\n         * A push-enabled property propagates changes to its value\n         * to the single token in its associated template.\n         *\n         * Due to this definition, a push-enabled property must be bound to a\n         * template containing a single token. Attempting to push-enable any\n         * other kind of property is an error.\n         * @param {String} propName - The property name.\n         */\n        enablePush: function(propName) {\n            if (this._isPushEnabled(propName)) {\n                // Already push-enabled\n                return;\n            }\n\n            this._pushed_properties.push(propName);\n\n            // If binding already exists, push-enable it\n            if (this._bindings[propName] !== undefined) {\n                this._configureBindingForPush(propName);\n            }\n        },\n\n        _isPushEnabled: function(propName) {\n            return _.contains(this._pushed_properties, propName);\n        },\n\n        _configureBindingForPush: function(propName) {\n            var binding = this._bindings[propName];\n            if (!TokenUtils.isToken(binding.template)) {\n                // This property's template is not presently bound to a\n                // single token. Therefore there is no token that can\n                // be pushed to yet.\n                return;\n            }\n\n            // Forward value changes to solitary token in template\n            var that = this;\n            var listener = function(model, newValue, options) {\n                that._pushPropertyValue(propName);\n            };\n            this.listenTo(this, 'change:' + propName, listener);\n\n            // Save listener for later removal\n            listener.dispose = function() {\n                that.stopListening(that, 'change:' + propName, listener);\n            };\n            binding._listeners.push(listener);\n        },\n\n        _pushPropertyValue: function(propName, options) {\n            var binding = this._bindings[propName];\n            var newValue = this.get(propName);\n            var observedItem = binding.observes[0];\n            var observedContext = this._tokenRegistry.getInstance(\n                observedItem.namespace, { create: true });\n            var observedPropName = observedItem.name;\n\n            if (VERBOSE) {\n                console.log('PROPAGATE: ' + newValue + ' -> ' + observedPropName);\n            }\n\n            // We may have gotten a stashed silent value (see set()), so we have\n            // to unstash it.\n            options = options || {};\n            if (options.hasOwnProperty('_silent')) {\n                options.silent = options._silent;\n                delete options._silent;\n            }\n\n            observedContext.set(observedPropName, newValue, options);\n        },\n\n        /**\n         * Sets the specified property with a value.\n         *\n         * Values marked with \"`mvc.tokenSafe`\" are interpreted as templates.\n         *\n         * @param {String} key - The name of the property to set.\n         * @param {String} val - The value of the property.\n         * @param {Object} [options] - Options.\n         * @param {Boolean} [options.tokens=false] - Indicates whether to interpret\n         * string values as a template rather than as a literal string. When `true`,\n         * any string values are interpreted as templates rather than literal strings.\n         */\n        set: function(key, val, options) {\n            var that = this;\n\n            // Normalize arguments to (attrs, options)\n            var attrs;\n            if (typeof key === 'object') {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n            options = options || {};\n\n            if (!options.hasOwnProperty('tokens')) {\n                options.tokens = this._applyTokensByDefault;\n            }\n\n            // Collect changes to be made\n            var bulkTemplateSets = {};\n            var bulkTemplateUnsets = [];\n            var bulkSelfSets = {};\n            var queueTemplateSet = function(propName, propTemplate) {\n                bulkTemplateSets[propName] = propTemplate;\n            };\n            var queueLiteralSet = function(propName, propValue) {\n                if (!that._isPushEnabled(propName)) {\n                    // Blank out any preexisting template unless this\n                    // is a pushed property\n                    bulkTemplateUnsets.push(propName);\n                }\n                bulkSelfSets[propName] = propValue;\n            };\n            _.each(attrs, function(propValue, propName) {\n                if (propValue instanceof TokenSafeString) {\n                    // Interpret as template.\n                    queueTemplateSet(propName, propValue.value);\n                } else if (propValue instanceof TokenEscapeString) {\n                    // Interpret as literal value.\n                    queueLiteralSet(propName, propValue.value);\n                } else if (_.isString(propValue) && options.tokens) {\n                    // Interpret as template.\n                    queueTemplateSet(propName, propValue);\n                } else {\n                    // Otherwise interpret as a literal value.\n                    queueLiteralSet(propName, propValue);\n                }\n            });\n\n            // If we do a set/unset on _templates, we can't pass in\n            // {silent: true}, as that will preclude us from getting a change\n            // event, and we won't be able to set up any bindings. Instead,\n            // we stash the silent value in _silent, and only use these\n            // modified options for _templates.\n            var optionsForTemplates = _.clone(options);\n            if (options.hasOwnProperty('silent')) {\n                optionsForTemplates._silent = options.silent;\n                delete optionsForTemplates.silent;\n            }\n\n            // Perform changes in bulk\n            if (!_.isEmpty(bulkTemplateSets)) {\n                this._templates.set(bulkTemplateSets, optionsForTemplates);\n            }\n            if (!_.isEmpty(bulkTemplateUnsets)) {\n                _.each(bulkTemplateUnsets, function(propName) {\n                    if (that._templates && that._templates.has(propName)) {\n                        that._templates.unset(propName, optionsForTemplates);\n                    }\n                });\n            }\n            if (!_.isEmpty(bulkSelfSets)) {\n                BaseModel.prototype.set.call(this, bulkSelfSets, options);\n            }\n        },\n\n        /**\n         * Gets the value of the specified property.\n         *\n         * @param {String} key - The name of the property to get.\n         * @param {Object} [options] - Options.\n         * @param {Boolean} [options.tokens=false] - When `true`, returns the\n         * template string for the specified property rather than its current value.\n         */\n        get: function(key, options) {\n            options || (options = {});\n            if (!options.hasOwnProperty('tokens')) {\n                options.tokens = this._retrieveTokensByDefault;\n            }\n\n            if (options.tokens) {\n                if (this._templates.has(key)) {\n                    return this._templates.get(key);\n                } else {\n                    return TokenUtils.quoteAsTokenString(\n                        BaseModel.prototype.get.call(this, key));\n                }\n            } else {\n                var v = BaseModel.prototype.get.call(this, key);\n                if (v == null && options.retainUnmatchedTokens && this._templates.has(key)) {\n                    v = TokenUtils.replaceTokens(this._templates.get(key), this._tokenRegistry, {\n                        tokenNamespace: this._tokenNamespace,\n                        escaper: this._tokenEscaper,\n                        allowNoEscape: this._allowNoEscape\n                    });\n                }\n                return v;\n            }\n        },\n\n        /**\n         * Returns a dictionary of all properties for this model\n         * with the specified prefix. The prefix is removed in the returned copy.\n         *\n         * Properties that are computed from templates are returned\n         * as an appropriate `mvc.tokenSafe(...)` value.\n         *\n         * For example, if this model has `{'value': 'foo', 'tp_value': 'bar'}`,\n         * and the prefix for extraction is `'tp_'`, the returned dictionary\n         * is `{'value': 'bar'}`.\n         * @param {String} prefix - The prefix.\n         */\n        extractWithPrefix: function(prefix) {\n            var that = this;\n\n            var extractedProperties = {};\n            _.each(_.keys(this.attributes), function(propNameOnThis) {\n                if (propNameOnThis.indexOf(prefix) === 0) {\n                    var propName =\n                        propNameOnThis.substring(prefix.length);\n\n                    // Get property's template or literal value\n                    var propValue;\n                    var templateValue = that.get(propNameOnThis, {tokens: true});\n                    if (templateValue !== undefined) {\n                        propValue = mvc.tokenSafe(templateValue);\n                    } else {\n                        propValue = that.get(propNameOnThis);\n                    }\n\n                    extractedProperties[propName] = propValue;\n                }\n            });\n            return extractedProperties;\n        },\n\n        /**\n         * Returns a copy of all properties for this model.\n         *\n         * @param {Object} [options] - Options.\n         * @param {Boolean} [options.tokens=false] - When `true`, returns the\n         * template string for the specified property rather than its current value.\n         */\n        toJSON: function(options) {\n            options || (options = {});\n            if (!options.hasOwnProperty('tokens')) {\n                options.tokens = this._retrieveTokensByDefault;\n            }\n\n            if (options.tokens) {\n                var that = this;\n\n                var result = {};\n                // Fill in quoted literals\n                _.each(this.attributes, function(value, key) {\n                    result[key] = that.get(key, {tokens: true});\n                });\n                // Fill in real templates\n                result = _.extend(result, this._templates.toJSON());\n                return result;\n            } else {\n                return BaseModel.prototype.toJSON.apply(this, arguments);\n            }\n        },\n\n        dispose: function() {\n            this._templates.deepOff();\n            _.each(this._bindings, this._disposeBindingListeners);\n            this._bindings = {};\n            this.deepOff();\n        },\n\n        _disposeBindingListeners: function(binding) {\n            if (binding) {\n                _.each(binding._listeners, function(listener) {\n                    listener.dispose();\n                });\n                binding._listeners = [];\n            }\n        }\n    });\n\n    /*\n     * Creates an empty report model for use by low-level core UI views.\n     *\n     * Core UI views expect that templated properties can always be\n     * accessed and that they retain unmatched tokens. It is also assumed\n     * that templated properties can be set without specifying `{tokens: true}`\n     * explicitly.\n     *\n     * Package-private.\n     */\n    TokenAwareModel._createReportModel = function(attributes, options) {\n        options = options || {};\n        return new TokenAwareModel(attributes || {}, _.extend({\n            applyTokensByDefault: true,\n            retainUnmatchedTokens: true\n        }, options));\n    };\n\n    return TokenAwareModel;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///133\n");

/***/ }),

/***/ 134:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(require, exports, module) {\n    var _ = __webpack_require__(121);\n    var Backbone = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"backbone\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var console = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"util/console\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var DomTrackerMixin = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"mixins/domtracker\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var mvc = __webpack_require__(125);\n\n    /**\n     * @constructor\n     * @memberOf splunkjs.mvc\n     * @name BaseManager\n     * @private\n     * @description The **BaseManager** base class is used for search managers.\n     * This class is not designed to be instantiated directly.\n     * @extends splunkjs.mvc.Backbone.Model\n     * @mixes domtracker\n     */\n    var BaseManager = Backbone.Model.extend(/** @lends splunkjs.mvc.BaseManager.prototype */{\n        constructor: function(attributes, options) {\n            attributes = attributes || {};\n            options = options || {};\n\n            // Get or generate a name\n            var id = options.id || attributes.id;\n\n            if (id === undefined) {\n                id = options.name || attributes.name;\n                if (id !== undefined) {\n                    console.log(\"Use of 'name' to specify the ID of a Splunk model is deprecated.\");\n                }\n            }\n\n            if (id === undefined) {\n                id = _.uniqueId('manager_');\n            }\n\n            // Store it on the instance/options\n            this.id = this.name = options.name = options.id = id;\n\n            // Register it on the global registry\n            this.registry = options.registry || options._tokenRegistry || mvc.Components;\n\n            var returned = Backbone.Model.prototype.constructor.apply(this, arguments);\n            this.registry.registerInstance(this.id, this, { replace: options.replace });\n\n            return returned;\n        },\n\n        _start: function() {},\n\n        dispose: function() {\n            this.stopListeningDOM();\n            this.stopListening();\n\n            if (this.registry.getInstance(this.id) === this) {\n                this.registry.revokeInstance(this.id);\n            }\n        },\n\n        getType: function() {\n            return this.settings.get('type') || 'primary';\n        }\n    });\n\n    _.extend(BaseManager.prototype, DomTrackerMixin);\n\n    return BaseManager;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/**\n * Search progress event.\n *\n * @event\n * @name splunkjs.mvc.BaseManager#search\n * @property {Boolean} search:cancelled - Fired when the search is cancelled. Changing the properties of the search starts a new one, which may cancel an old search.\n * @property {Boolean} search:done - Fired when the search has finished. Note that this event is never fired for a real-time search.\n * @property {Boolean} search:error - Fired when an error occurs, such as when the user does not provide a search query, the user does not provide a valid name of a saved search, or when a network failure occurs.\n * @property {Boolean} search:failed - Fired when the search job fails.\n * @property {Boolean} search:progress - Fired to indicate search progress.\n * @property {Boolean} search:start - Fired when the search is successfully started.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2Fsb21vdGFuL0RvY3VtZW50cy92bXNoYXJlL3NjcmF0Y2hwYWQvcmVhY3Qvb25zcGx1bmsvbm9kZV9tb2R1bGVzL0BzcGx1bmsvc3BsdW5rLXdlYi1jb3JlL3NlYXJjaF9tcnNwYXJrbGUvZXhwb3NlZC9qcy9zcGx1bmtqcy9tdmMvYmFzZW1hbmFnZXIuanM/YThiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxRUFBTztBQUNQLFlBQVksbUJBQU8sQ0FBQyxHQUFZO0FBQ2hDLG1CQUFtQixtQkFBTyxDQUFDLG9JQUFVO0FBQ3JDLGtCQUFrQixtQkFBTyxDQUFDLHdJQUFjO0FBQ3hDLDBCQUEwQixtQkFBTyxDQUFDLDZJQUFtQjtBQUNyRCxjQUFjLG1CQUFPLENBQUMsR0FBTzs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkRBQTJELDJCQUEyQjs7QUFFdEY7QUFDQSxTQUFTOztBQUVULDZCQUE2Qjs7QUFFN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBLENBQUM7QUFBQSxvR0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QiIsImZpbGUiOiIxMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgdmFyIF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG4gICAgdmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKTtcbiAgICB2YXIgY29uc29sZSA9IHJlcXVpcmUoJ3V0aWwvY29uc29sZScpO1xuICAgIHZhciBEb21UcmFja2VyTWl4aW4gPSByZXF1aXJlKCdtaXhpbnMvZG9tdHJhY2tlcicpO1xuICAgIHZhciBtdmMgPSByZXF1aXJlKCcuL212YycpO1xuXG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQG1lbWJlck9mIHNwbHVua2pzLm12Y1xuICAgICAqIEBuYW1lIEJhc2VNYW5hZ2VyXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAZGVzY3JpcHRpb24gVGhlICoqQmFzZU1hbmFnZXIqKiBiYXNlIGNsYXNzIGlzIHVzZWQgZm9yIHNlYXJjaCBtYW5hZ2Vycy5cbiAgICAgKiBUaGlzIGNsYXNzIGlzIG5vdCBkZXNpZ25lZCB0byBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgICogQGV4dGVuZHMgc3BsdW5ranMubXZjLkJhY2tib25lLk1vZGVsXG4gICAgICogQG1peGVzIGRvbXRyYWNrZXJcbiAgICAgKi9cbiAgICB2YXIgQmFzZU1hbmFnZXIgPSBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoLyoqIEBsZW5kcyBzcGx1bmtqcy5tdmMuQmFzZU1hbmFnZXIucHJvdG90eXBlICove1xuICAgICAgICBjb25zdHJ1Y3RvcjogZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge1xuICAgICAgICAgICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwge307XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAgICAgLy8gR2V0IG9yIGdlbmVyYXRlIGEgbmFtZVxuICAgICAgICAgICAgdmFyIGlkID0gb3B0aW9ucy5pZCB8fCBhdHRyaWJ1dGVzLmlkO1xuXG4gICAgICAgICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlkID0gb3B0aW9ucy5uYW1lIHx8IGF0dHJpYnV0ZXMubmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVzZSBvZiAnbmFtZScgdG8gc3BlY2lmeSB0aGUgSUQgb2YgYSBTcGx1bmsgbW9kZWwgaXMgZGVwcmVjYXRlZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlkID0gXy51bmlxdWVJZCgnbWFuYWdlcl8nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RvcmUgaXQgb24gdGhlIGluc3RhbmNlL29wdGlvbnNcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWUgPSBvcHRpb25zLmlkID0gaWQ7XG5cbiAgICAgICAgICAgIC8vIFJlZ2lzdGVyIGl0IG9uIHRoZSBnbG9iYWwgcmVnaXN0cnlcbiAgICAgICAgICAgIHRoaXMucmVnaXN0cnkgPSBvcHRpb25zLnJlZ2lzdHJ5IHx8IG9wdGlvbnMuX3Rva2VuUmVnaXN0cnkgfHwgbXZjLkNvbXBvbmVudHM7XG5cbiAgICAgICAgICAgIHZhciByZXR1cm5lZCA9IEJhY2tib25lLk1vZGVsLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RyeS5yZWdpc3Rlckluc3RhbmNlKHRoaXMuaWQsIHRoaXMsIHsgcmVwbGFjZTogb3B0aW9ucy5yZXBsYWNlIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuZWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3N0YXJ0OiBmdW5jdGlvbigpIHt9LFxuXG4gICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nRE9NKCk7XG4gICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucmVnaXN0cnkuZ2V0SW5zdGFuY2UodGhpcy5pZCkgPT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdHJ5LnJldm9rZUluc3RhbmNlKHRoaXMuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3MuZ2V0KCd0eXBlJykgfHwgJ3ByaW1hcnknO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBfLmV4dGVuZChCYXNlTWFuYWdlci5wcm90b3R5cGUsIERvbVRyYWNrZXJNaXhpbik7XG5cbiAgICByZXR1cm4gQmFzZU1hbmFnZXI7XG59KTtcbi8qKlxuICogU2VhcmNoIHByb2dyZXNzIGV2ZW50LlxuICpcbiAqIEBldmVudFxuICogQG5hbWUgc3BsdW5ranMubXZjLkJhc2VNYW5hZ2VyI3NlYXJjaFxuICogQHByb3BlcnR5IHtCb29sZWFufSBzZWFyY2g6Y2FuY2VsbGVkIC0gRmlyZWQgd2hlbiB0aGUgc2VhcmNoIGlzIGNhbmNlbGxlZC4gQ2hhbmdpbmcgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNlYXJjaCBzdGFydHMgYSBuZXcgb25lLCB3aGljaCBtYXkgY2FuY2VsIGFuIG9sZCBzZWFyY2guXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHNlYXJjaDpkb25lIC0gRmlyZWQgd2hlbiB0aGUgc2VhcmNoIGhhcyBmaW5pc2hlZC4gTm90ZSB0aGF0IHRoaXMgZXZlbnQgaXMgbmV2ZXIgZmlyZWQgZm9yIGEgcmVhbC10aW1lIHNlYXJjaC5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gc2VhcmNoOmVycm9yIC0gRmlyZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMsIHN1Y2ggYXMgd2hlbiB0aGUgdXNlciBkb2VzIG5vdCBwcm92aWRlIGEgc2VhcmNoIHF1ZXJ5LCB0aGUgdXNlciBkb2VzIG5vdCBwcm92aWRlIGEgdmFsaWQgbmFtZSBvZiBhIHNhdmVkIHNlYXJjaCwgb3Igd2hlbiBhIG5ldHdvcmsgZmFpbHVyZSBvY2N1cnMuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHNlYXJjaDpmYWlsZWQgLSBGaXJlZCB3aGVuIHRoZSBzZWFyY2ggam9iIGZhaWxzLlxuICogQHByb3BlcnR5IHtCb29sZWFufSBzZWFyY2g6cHJvZ3Jlc3MgLSBGaXJlZCB0byBpbmRpY2F0ZSBzZWFyY2ggcHJvZ3Jlc3MuXG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IHNlYXJjaDpzdGFydCAtIEZpcmVkIHdoZW4gdGhlIHNlYXJjaCBpcyBzdWNjZXNzZnVsbHkgc3RhcnRlZC5cbiAqL1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL1VzZXJzL2Fsb21vdGFuL0RvY3VtZW50cy92bXNoYXJlL3NjcmF0Y2hwYWQvcmVhY3Qvb25zcGx1bmsvbm9kZV9tb2R1bGVzL0BzcGx1bmsvc3BsdW5rLXdlYi1jb3JlL3NlYXJjaF9tcnNwYXJrbGUvZXhwb3NlZC9qcy9zcGx1bmtqcy9tdmMvYmFzZW1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///134\n");

/***/ }),

/***/ 135:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(require, exports, module) {\n    var _ = __webpack_require__(121);\n    var mvc = __webpack_require__(125);\n    var console = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"util/console\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var Backbone = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"backbone\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var Settings = __webpack_require__(136);\n    var viewloggingmixin = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"mixins/viewlogging\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    var ComponentBindingMixin = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"dashboard/mixins/ComponentBindingMixin\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n    /**\n     * @constructor\n     * @memberOf splunkjs.mvc\n     * @name BaseSplunkView\n     * @private\n     * @description The **BaseSplunkView** base view class is used for Splunk\n     * views. This class is not designed to be subclassed. Extend\n     * {@link splunkjs.mvc.SimpleSplunkView} instead.\n     * @extends splunkjs.mvc.Backbone.View\n     * @mixes viewlogging\n     *\n     * @param {Object} options\n     * @param {String} options.id - The unique ID for this control.\n     * @param {String} options.el - Pre-existing &lt;div&gt; tag in which to render\n     * this view.\n     * @param {Object} options.settings -  A **Settings** model instance to\n     * use.\n     * @param {Object} options.settingsOptions -  Initial options for this\n     * view's **Settings** model.\n     * @param {Object} options.* - Initial attributes for this view's\n     * **Settings** model. See the subclass documentation for details.\n     * @param {Object} settingsOptions - The initial options for this view's\n     * **Settings** model.\n     */\n    var BaseSplunkView = Backbone.View.extend(/** @lends splunkjs.mvc.BaseSplunkView.prototype */{\n        _numConfigureCalls: 0,\n\n        /**\n         * @protected\n         * Names of options that will be excluded from this component's\n         * settings model if passed to the constructor.\n         */\n        omitFromSettings: [],\n        _uniqueIdPrefix: 'view_',\n\n        constructor: function(options, settingsOptions) {\n            options = options || {};\n            settingsOptions = settingsOptions || {};\n\n            options.settingsOptions = _.extend(\n                options.settingsOptions || {},\n                settingsOptions);\n\n            // Internal property to track object lifetime.\n            // With this flag we want to prevent invoking methods / code\n            // on already removed instance.\n            this._removed = false;\n\n            // Get an ID or generate one\n            var id = options.id;\n            if (id === undefined && options.name) {\n                id = options.name;\n                console.warn(\"Use of 'name' to specify the ID of a Splunk model is deprecated.\");\n            }\n\n            if (id === undefined) {\n                id = _.uniqueId(this._uniqueIdPrefix || 'view_');\n            }\n\n            this.name = this.id = options.name = options.id = id;\n\n            this.options = _.extend({}, this.options, options);\n            this.registry = this.options.settingsOptions.registry\n                || this.options.settingsOptions._tokenRegistry\n                || mvc.Components;\n\n            // Delegate to Backbone.View's constructor.\n            // NOTE: This will call initialize() as a side effect.\n            var returned = Backbone.View.prototype.constructor.apply(this, arguments);\n            if (this._numConfigureCalls == 0) {\n                // initialize() should have called configure() but did not.\n                // In this case automatically call configure().\n                this.configure();\n            }\n\n            this.registry.registerInstance(this.id, this, { replace: settingsOptions.replace });\n            return returned;\n        },\n\n        /**\n         * @protected\n         * Initializes this view's settings model based on the contents of\n         * `this.options`.\n         */\n        configure: function() {\n            this._numConfigureCalls++;\n            if (this._numConfigureCalls > 1) {\n                throw new Error('BaseSplunkView.configure() called multiple times.');\n            }\n\n            // We may have received a Settings model instance to use instead\n            // of creating our own. If so, we just use it and return immediately.\n            var settings = this.options.settings;\n            if (settings && (settings instanceof Settings)) {\n                this.settings = settings;\n                return this;\n            }\n\n            // Reinterpret remaining view options as settings attributes.\n            var localOmitFromSettings = (this.omitFromSettings || []).concat(\n                ['model', 'collection', 'el', 'attributes',\n                 'className', 'tagName', 'events', 'settingsOptions']);\n\n            var settingsAttributes = _.omit(this.options, localOmitFromSettings);\n            var settingsOptions = this.options.settingsOptions;\n\n            // Now, we create our default settings model.\n            this.settings = new Settings(settingsAttributes, _.extend({}, settingsOptions, {\n                _tokenRegistry: this.registry\n            }));\n\n            return this;\n        },\n\n        // JIRA: Just invoke configure() from constructor() instead of\n        //       relying on subclasses to do it. (Don't forget to update\n        //       the doc comment above.) (DVPL-2436)\n        /**\n         * Initializes this view.\n         *\n         * Subclasses are expected to override this method.\n         *\n         * All implementations must call {@link splunkjs.mvc.configure | configure}, usually at the beginning\n         * of this method.\n         */\n        initialize: function() {\n            Backbone.View.prototype.initialize.apply(this, arguments);\n        },\n\n        remove: function() {\n            this._removed = true;\n\n            this.settings.dispose();\n\n            // Call our super class\n            Backbone.View.prototype.remove.apply(this, arguments);\n\n            // Remove it from the registry\n            if (this.registry.getInstance(this.id) === this) {\n                this.registry.revokeInstance(this.id);\n            }\n\n            return this;\n        },\n\n        dispose: function() {\n            this.remove();\n        },\n\n        setElement: function() {\n            // We're doing this in setElement for a few reasons:\n            // 1. It means that subclasses won't have to worry about\n            // calling our initialize class.\n            // 2. It is actually the most robust way to do this, because\n            // it means we will catch both construction of new views, as\n            // well as later calls to setElement\n\n            // Call our super class\n            Backbone.View.prototype.setElement.apply(this, arguments);\n\n            // Now that we have our new $el, we can call addClass on it\n            this.$el.addClass(\"splunk-view\");\n            if (this.className) {\n                this.$el.addClass(this.className);\n            }\n\n            if (!this.$el.attr('id')) {\n                this.$el.attr('id', this.id);\n            }\n\n            // This is for QA engineers to easily grab DOM element by \"data-view\" attribute.\n            // This approach has been used in core views/Base.js for a long long time.\n            if (this.moduleId) {\n                this.$el.attr('data-view', this.moduleId);\n            }\n\n            return this;\n        }\n    });\n\n    _.extend(BaseSplunkView.prototype, ComponentBindingMixin, viewloggingmixin);\n\n    return BaseSplunkView;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/**\n * Click event.\n *\n * @event\n * @name splunkjs.mvc.TableView#click\n * @property {Boolean} click:row - Fired when a row is clicked.\n * @property {Boolean} click:chart - Fired when a cell is clicked.\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///135\n");

/***/ }),

/***/ 136:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(require, exports, module) {\n    var TokenAwareModel = __webpack_require__(133);\n\n    /**\n     * @constructor\n     * @memberOf splunkjs.mvc\n     * @name Settings\n     * @description The **Settings** base input class contains the Settings model\n     * for SplunkJS components.\n     * @extends splunkjs.mvc.TokenAwareModel\n    */\n    var Settings = TokenAwareModel.extend(/** @lends splunkjs.mvc.Settings.prototype */{\n        sync: function() { return false; }\n    });\n    \n    return Settings;\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2Fsb21vdGFuL0RvY3VtZW50cy92bXNoYXJlL3NjcmF0Y2hwYWQvcmVhY3Qvb25zcGx1bmsvbm9kZV9tb2R1bGVzL0BzcGx1bmsvc3BsdW5rLXdlYi1jb3JlL3NlYXJjaF9tcnNwYXJrbGUvZXhwb3NlZC9qcy9zcGx1bmtqcy9tdmMvc2V0dGluZ3MuanM/MTRmZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxRUFBTztBQUNQLDBCQUEwQixtQkFBTyxDQUFDLEdBQW1COztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QyxLQUFLOztBQUVMO0FBQ0EsQ0FBQztBQUFBLG9HQUFDIiwiZmlsZSI6IjEzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShmdW5jdGlvbihyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgICB2YXIgVG9rZW5Bd2FyZU1vZGVsID0gcmVxdWlyZSgnLi90b2tlbmF3YXJlbW9kZWwnKTtcblxuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJPZiBzcGx1bmtqcy5tdmNcbiAgICAgKiBAbmFtZSBTZXR0aW5nc1xuICAgICAqIEBkZXNjcmlwdGlvbiBUaGUgKipTZXR0aW5ncyoqIGJhc2UgaW5wdXQgY2xhc3MgY29udGFpbnMgdGhlIFNldHRpbmdzIG1vZGVsXG4gICAgICogZm9yIFNwbHVua0pTIGNvbXBvbmVudHMuXG4gICAgICogQGV4dGVuZHMgc3BsdW5ranMubXZjLlRva2VuQXdhcmVNb2RlbFxuICAgICovXG4gICAgdmFyIFNldHRpbmdzID0gVG9rZW5Bd2FyZU1vZGVsLmV4dGVuZCgvKiogQGxlbmRzIHNwbHVua2pzLm12Yy5TZXR0aW5ncy5wcm90b3R5cGUgKi97XG4gICAgICAgIHN5bmM6IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gU2V0dGluZ3M7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC9Vc2Vycy9hbG9tb3Rhbi9Eb2N1bWVudHMvdm1zaGFyZS9zY3JhdGNocGFkL3JlYWN0L29uc3BsdW5rL25vZGVfbW9kdWxlcy9Ac3BsdW5rL3NwbHVuay13ZWItY29yZS9zZWFyY2hfbXJzcGFya2xlL2V4cG9zZWQvanMvc3BsdW5ranMvbXZjL3NldHRpbmdzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///136\n");

/***/ }),

/***/ 137:
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(require, exports, module) {\n    var _ = __webpack_require__(121);\n    var TokenAwareModel = __webpack_require__(133);\n    var TokenSafeString = __webpack_require__(126);\n    var splunkUtils = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"splunk.util\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    \n    // Extends TokenAwareModel with an additional 'qualified'\n    // keyword option on the set() and get() methods.\n    var SearchSettingsModel = TokenAwareModel.extend(/** @lends splunkjs.mvc.SearchSettingsModel.prototype */{\n        set: function(key, val, options) {\n            var attrs;\n            if(key == null) {\n                return this;\n            }\n            if(typeof key === 'object') {\n                attrs = key;\n                options = val;\n            } else {\n                (attrs = {})[key] = val;\n            }\n\n            if(options && options.qualified && attrs.search) {\n                if(attrs.search instanceof TokenSafeString) {\n                    attrs.search = new TokenSafeString(splunkUtils.stripLeadingSearchCommand(attrs.search.value));\n                } else {\n                    attrs.search = splunkUtils.stripLeadingSearchCommand(attrs.search);\n                }\n            }\n            return TokenAwareModel.prototype.set.call(this, attrs, options);\n        },\n        get: function(attribute, options) {\n            var result = TokenAwareModel.prototype.get.apply(this, arguments);\n            \n            // We only want to add the leading search if:\n            // 1. the get is for 'search'\n            // 2. they explicitly asked for it to be qualified\n            // 3. there is an actual search string (i.e. not an empty string)\n            if(attribute === 'search' && options && options.qualified && result) {\n                result = splunkUtils.addLeadingSearchCommand(result);\n            }\n            \n            return result;\n        },\n        // Retained for internal backward compatibility concerns.\n        resolve: function(options) {\n            return this.get(\"search\", options);\n        }\n    });\n\n    /*\n     * Subset of attribute names on the SearchSettingsModel that will be passed\n     * through to the underlying search job that is created.\n     * \n     * This list is manually collected from the combination of:\n     *  * POST search/jobs\n     *  * POST saved/searches/<name>/dispatch\n     * You can find the various properties in the REST API reference documentation.\n     */\n    SearchSettingsModel.ALLOWED_ATTRIBUTES = [\n        \"adhoc_search_level\",\n        \"app\",\n        \"auto_cancel\",\n        \"auto_finalize_ec\",\n        \"auto_pause\",\n        \"buckets\",\n        \"earliest_time\",\n        \"enable_lookups\",\n        \"exec_mode\",\n        \"force_bundle_replication\",\n        \"indexedRealtime\",\n        \"indexedRealtimeOffset\",\n        \"latest_time\",\n        \"label\",\n        \"lookups\",\n        \"max_count\",\n        \"max_time\",\n        \"namespace\",\n        \"now\",\n        \"owner\",\n        \"preview\",\n        \"reduce_freq\",\n        \"reload_macros\",\n        \"remote_server_list\",\n        \"required_field_list\",\n        \"rf\",\n        \"rt_backfill\",\n        \"rt_blocking\",\n        \"rt_indexfilter\",\n        \"rt_maxblocksecs\",\n        \"rt_queue_size\",\n        \"search\",\n        \"search_listener\",\n        \"search_mode\",\n        \"spawn_process\",\n        \"status_buckets\",\n        \"sync_bundle_replication\",\n        \"time_format\",\n        \"timeout\",\n        \"ttl\",\n        \"sample_ratio\",\n        \"provenance\"\n    ];\n    \n    return {\n        SearchSettingsModel: SearchSettingsModel,\n        // Deprecated\n        SearchJob: SearchSettingsModel,\n        // Deprecated\n        SearchQuery: SearchSettingsModel\n    };\n}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL2Fsb21vdGFuL0RvY3VtZW50cy92bXNoYXJlL3NjcmF0Y2hwYWQvcmVhY3Qvb25zcGx1bmsvbm9kZV9tb2R1bGVzL0BzcGx1bmsvc3BsdW5rLXdlYi1jb3JlL3NlYXJjaF9tcnNwYXJrbGUvZXhwb3NlZC9qcy9zcGx1bmtqcy9tdmMvc2VhcmNobW9kZWwuanM/ZTcwZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxRUFBTztBQUNQLFlBQVksbUJBQU8sQ0FBQyxHQUFZO0FBQ2hDLDBCQUEwQixtQkFBTyxDQUFDLEdBQW1CO0FBQ3JELDBCQUEwQixtQkFBTyxDQUFDLEdBQW1CO0FBQ3JELHNCQUFzQixtQkFBTyxDQUFDLHVJQUFhOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLDJCQUEyQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFBQSxvR0FBQyIsImZpbGUiOiIxMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgdmFyIF8gPSByZXF1aXJlKFwidW5kZXJzY29yZVwiKTtcbiAgICB2YXIgVG9rZW5Bd2FyZU1vZGVsID0gcmVxdWlyZSgnLi90b2tlbmF3YXJlbW9kZWwnKTtcbiAgICB2YXIgVG9rZW5TYWZlU3RyaW5nID0gcmVxdWlyZShcIi4vdG9rZW5zYWZlc3RyaW5nXCIpO1xuICAgIHZhciBzcGx1bmtVdGlscyA9IHJlcXVpcmUoJ3NwbHVuay51dGlsJyk7XG4gICAgXG4gICAgLy8gRXh0ZW5kcyBUb2tlbkF3YXJlTW9kZWwgd2l0aCBhbiBhZGRpdGlvbmFsICdxdWFsaWZpZWQnXG4gICAgLy8ga2V5d29yZCBvcHRpb24gb24gdGhlIHNldCgpIGFuZCBnZXQoKSBtZXRob2RzLlxuICAgIHZhciBTZWFyY2hTZXR0aW5nc01vZGVsID0gVG9rZW5Bd2FyZU1vZGVsLmV4dGVuZCgvKiogQGxlbmRzIHNwbHVua2pzLm12Yy5TZWFyY2hTZXR0aW5nc01vZGVsLnByb3RvdHlwZSAqL3tcbiAgICAgICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIGF0dHJzO1xuICAgICAgICAgICAgaWYoa2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgYXR0cnMgPSBrZXk7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHZhbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgKGF0dHJzID0ge30pW2tleV0gPSB2YWw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5xdWFsaWZpZWQgJiYgYXR0cnMuc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgaWYoYXR0cnMuc2VhcmNoIGluc3RhbmNlb2YgVG9rZW5TYWZlU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGF0dHJzLnNlYXJjaCA9IG5ldyBUb2tlblNhZmVTdHJpbmcoc3BsdW5rVXRpbHMuc3RyaXBMZWFkaW5nU2VhcmNoQ29tbWFuZChhdHRycy5zZWFyY2gudmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhdHRycy5zZWFyY2ggPSBzcGx1bmtVdGlscy5zdHJpcExlYWRpbmdTZWFyY2hDb21tYW5kKGF0dHJzLnNlYXJjaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFRva2VuQXdhcmVNb2RlbC5wcm90b3R5cGUuc2V0LmNhbGwodGhpcywgYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKGF0dHJpYnV0ZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFRva2VuQXdhcmVNb2RlbC5wcm90b3R5cGUuZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBhZGQgdGhlIGxlYWRpbmcgc2VhcmNoIGlmOlxuICAgICAgICAgICAgLy8gMS4gdGhlIGdldCBpcyBmb3IgJ3NlYXJjaCdcbiAgICAgICAgICAgIC8vIDIuIHRoZXkgZXhwbGljaXRseSBhc2tlZCBmb3IgaXQgdG8gYmUgcXVhbGlmaWVkXG4gICAgICAgICAgICAvLyAzLiB0aGVyZSBpcyBhbiBhY3R1YWwgc2VhcmNoIHN0cmluZyAoaS5lLiBub3QgYW4gZW1wdHkgc3RyaW5nKVxuICAgICAgICAgICAgaWYoYXR0cmlidXRlID09PSAnc2VhcmNoJyAmJiBvcHRpb25zICYmIG9wdGlvbnMucXVhbGlmaWVkICYmIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNwbHVua1V0aWxzLmFkZExlYWRpbmdTZWFyY2hDb21tYW5kKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJldGFpbmVkIGZvciBpbnRlcm5hbCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGNvbmNlcm5zLlxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXQoXCJzZWFyY2hcIiwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qXG4gICAgICogU3Vic2V0IG9mIGF0dHJpYnV0ZSBuYW1lcyBvbiB0aGUgU2VhcmNoU2V0dGluZ3NNb2RlbCB0aGF0IHdpbGwgYmUgcGFzc2VkXG4gICAgICogdGhyb3VnaCB0byB0aGUgdW5kZXJseWluZyBzZWFyY2ggam9iIHRoYXQgaXMgY3JlYXRlZC5cbiAgICAgKiBcbiAgICAgKiBUaGlzIGxpc3QgaXMgbWFudWFsbHkgY29sbGVjdGVkIGZyb20gdGhlIGNvbWJpbmF0aW9uIG9mOlxuICAgICAqICAqIFBPU1Qgc2VhcmNoL2pvYnNcbiAgICAgKiAgKiBQT1NUIHNhdmVkL3NlYXJjaGVzLzxuYW1lPi9kaXNwYXRjaFxuICAgICAqIFlvdSBjYW4gZmluZCB0aGUgdmFyaW91cyBwcm9wZXJ0aWVzIGluIHRoZSBSRVNUIEFQSSByZWZlcmVuY2UgZG9jdW1lbnRhdGlvbi5cbiAgICAgKi9cbiAgICBTZWFyY2hTZXR0aW5nc01vZGVsLkFMTE9XRURfQVRUUklCVVRFUyA9IFtcbiAgICAgICAgXCJhZGhvY19zZWFyY2hfbGV2ZWxcIixcbiAgICAgICAgXCJhcHBcIixcbiAgICAgICAgXCJhdXRvX2NhbmNlbFwiLFxuICAgICAgICBcImF1dG9fZmluYWxpemVfZWNcIixcbiAgICAgICAgXCJhdXRvX3BhdXNlXCIsXG4gICAgICAgIFwiYnVja2V0c1wiLFxuICAgICAgICBcImVhcmxpZXN0X3RpbWVcIixcbiAgICAgICAgXCJlbmFibGVfbG9va3Vwc1wiLFxuICAgICAgICBcImV4ZWNfbW9kZVwiLFxuICAgICAgICBcImZvcmNlX2J1bmRsZV9yZXBsaWNhdGlvblwiLFxuICAgICAgICBcImluZGV4ZWRSZWFsdGltZVwiLFxuICAgICAgICBcImluZGV4ZWRSZWFsdGltZU9mZnNldFwiLFxuICAgICAgICBcImxhdGVzdF90aW1lXCIsXG4gICAgICAgIFwibGFiZWxcIixcbiAgICAgICAgXCJsb29rdXBzXCIsXG4gICAgICAgIFwibWF4X2NvdW50XCIsXG4gICAgICAgIFwibWF4X3RpbWVcIixcbiAgICAgICAgXCJuYW1lc3BhY2VcIixcbiAgICAgICAgXCJub3dcIixcbiAgICAgICAgXCJvd25lclwiLFxuICAgICAgICBcInByZXZpZXdcIixcbiAgICAgICAgXCJyZWR1Y2VfZnJlcVwiLFxuICAgICAgICBcInJlbG9hZF9tYWNyb3NcIixcbiAgICAgICAgXCJyZW1vdGVfc2VydmVyX2xpc3RcIixcbiAgICAgICAgXCJyZXF1aXJlZF9maWVsZF9saXN0XCIsXG4gICAgICAgIFwicmZcIixcbiAgICAgICAgXCJydF9iYWNrZmlsbFwiLFxuICAgICAgICBcInJ0X2Jsb2NraW5nXCIsXG4gICAgICAgIFwicnRfaW5kZXhmaWx0ZXJcIixcbiAgICAgICAgXCJydF9tYXhibG9ja3NlY3NcIixcbiAgICAgICAgXCJydF9xdWV1ZV9zaXplXCIsXG4gICAgICAgIFwic2VhcmNoXCIsXG4gICAgICAgIFwic2VhcmNoX2xpc3RlbmVyXCIsXG4gICAgICAgIFwic2VhcmNoX21vZGVcIixcbiAgICAgICAgXCJzcGF3bl9wcm9jZXNzXCIsXG4gICAgICAgIFwic3RhdHVzX2J1Y2tldHNcIixcbiAgICAgICAgXCJzeW5jX2J1bmRsZV9yZXBsaWNhdGlvblwiLFxuICAgICAgICBcInRpbWVfZm9ybWF0XCIsXG4gICAgICAgIFwidGltZW91dFwiLFxuICAgICAgICBcInR0bFwiLFxuICAgICAgICBcInNhbXBsZV9yYXRpb1wiLFxuICAgICAgICBcInByb3ZlbmFuY2VcIlxuICAgIF07XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgU2VhcmNoU2V0dGluZ3NNb2RlbDogU2VhcmNoU2V0dGluZ3NNb2RlbCxcbiAgICAgICAgLy8gRGVwcmVjYXRlZFxuICAgICAgICBTZWFyY2hKb2I6IFNlYXJjaFNldHRpbmdzTW9kZWwsXG4gICAgICAgIC8vIERlcHJlY2F0ZWRcbiAgICAgICAgU2VhcmNoUXVlcnk6IFNlYXJjaFNldHRpbmdzTW9kZWxcbiAgICB9O1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gL1VzZXJzL2Fsb21vdGFuL0RvY3VtZW50cy92bXNoYXJlL3NjcmF0Y2hwYWQvcmVhY3Qvb25zcGx1bmsvbm9kZV9tb2R1bGVzL0BzcGx1bmsvc3BsdW5rLXdlYi1jb3JlL3NlYXJjaF9tcnNwYXJrbGUvZXhwb3NlZC9qcy9zcGx1bmtqcy9tdmMvc2VhcmNobW9kZWwuanNcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///137\n");

/***/ })

});